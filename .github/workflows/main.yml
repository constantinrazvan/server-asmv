name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Rulați pe branch-ul principal

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout codul sursă
    - name: Checkout repository
      uses: actions/checkout@v3

    # 2. Configurare .NET Core
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0'

    # 3. Restore dependențe
    - name: Restore dependencies
      run: dotnet restore ./server-asmv.sln

    # 4. Build proiectul
    - name: Build the project
      run: dotnet build ./server-asmv.sln --configuration Release --no-restore

    # 5. Publicare proiect
    - name: Publish the project
      run: dotnet publish ./ServerAsmv.csproj -c Release -o ./publish

    # 6. Copiere fișiere pe VPS
    - name: Deploy to VPS
      uses: appleboy/scp-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        source: ./publish/
        target: /var/www/app
        port: 2222

    # 7. Creare fișier cheie SSH
    - name: Create SSH key file
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    # 8. Adaugare VPS la known_hosts
    - name: Add VPS to known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -p 2222 ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    # 9. Creare sau actualizare serviciu pe VPS
    - name: Create or update service
      run: |
        ssh -i ~/.ssh/id_rsa -p 2222 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
        if [ ! -f /etc/systemd/system/myapp.service ]; then
          echo "Creating myapp.service"
          sudo bash -c 'cat > /etc/systemd/system/myapp.service <<- "EOL"
          [Unit]
          Description=Aplicatia mea .NET Core
          After=network.target

          [Service]
          WorkingDirectory=/var/www/app
          ExecStart=/usr/bin/dotnet /var/www/app/ServerAsmv.dll
          Restart=always
          RestartSec=10
          KillSignal=SIGINT
          SyslogIdentifier=myapp
          User=www-data
          Environment=ASPNETCORE_ENVIRONMENT=Production

          [Install]
          WantedBy=multi-user.target
          EOL'
          sudo systemctl daemon-reload
          sudo systemctl enable myapp.service
        else
          echo "Service already exists, updating if necessary"
          sudo systemctl daemon-reload
        fi
        EOF

    # 10. Aplicare migrări pe VPS
    - name: Apply database migrations
      run: |
        ssh -i ~/.ssh/id_rsa -p 2222 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
        cd /var/www/app
        sudo /usr/bin/dotnet ServerAsmv.dll --migrate
        EOF

    # 11. Repornire aplicație pe VPS
    - name: Restart application
      run: |
        ssh -i ~/.ssh/id_rsa -p 2222 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
        sudo systemctl restart myapp.service
        EOF
